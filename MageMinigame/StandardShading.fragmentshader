#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform float base_texture_weight;
uniform sampler2D blendTexture2;
uniform float blend_texture_2_weight;

uniform sampler2D mask_blend_secondary_texture;
uniform sampler2D mask_blend_mask;
uniform float mask_blend_enable;
	
	
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec4 LightColourIntensity;


void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(LightColourIntensity.x,LightColourIntensity.y,LightColourIntensity.z);
	float LightPower = LightColourIntensity.a;
	
	
	// Material properties
	
	
	vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	
	if(mask_blend_enable >= 0.9f){
		vec3 MaskColor = texture2D(mask_blend_mask, UV).rgb;
		float avg = (MaskColor.r + MaskColor.g + MaskColor.b ) / 3.0f;	
		vec3 OtherColor = texture2D(mask_blend_secondary_texture, UV).rgb;
		MaterialDiffuseColor = avg * OtherColor  + (1 - avg) * MaterialDiffuseColor;
	}
	
	
	if(blend_texture_2_weight > 0.0){
		MaterialDiffuseColor = MaterialDiffuseColor * base_texture_weight + texture2D( blendTexture2, UV ).rgb * blend_texture_2_weight;		
	}	
		
		
		

		
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// TEST: Non Uniform location
	//vec3 LightPosition_woldspace_TEST = vec3(0,0,4);
	
	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace ); 
	

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	//color = 
		// Ambient : simulates indirect lighting
	//	MaterialAmbientColor +
		// Diffuse : "color" of the object
	//	MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
	//	MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
	
	//Light falls off by distance squared
	color.r=MaterialAmbientColor.r + MaterialDiffuseColor.r * LightColor.r * LightPower * cosTheta / (distance*distance); 
	color.g=MaterialAmbientColor.g + MaterialDiffuseColor.g * LightColor.g * LightPower * cosTheta / (distance*distance);
	color.b=MaterialAmbientColor.b + MaterialDiffuseColor.b * LightColor.b * LightPower * cosTheta / (distance*distance);
	
	//Light falls off by distance (unrealistic but might look better)
	//color.r=MaterialAmbientColor.r + MaterialDiffuseColor.r * LightColor.r * LightPower * cosTheta / (distance); 
	//color.g=MaterialAmbientColor.g + MaterialDiffuseColor.g * LightColor.g * LightPower * cosTheta / (distance);
	//color.b=MaterialAmbientColor.b + MaterialDiffuseColor.b * LightColor.b * LightPower * cosTheta / (distance);
	
		
	
	
	color.a=texture2D( myTextureSampler, UV ).a;
	
}